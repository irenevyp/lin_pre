# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newlin.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import functools
import numpy as np
import random as rd
import matplotlib
matplotlib.use("Qt5Agg")
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation
import matplotlib.ticker as ticker
import imageio
from matplotlib.figure import Figure
from matplotlib.animation import TimedAnimation
from matplotlib.lines import Line2D
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import time
import threading
import os
D = 2
H = [[0] * D for i in range(D)]
a = [[0] * D for i in range(D)]


def lin(x0, y0, x1, y1):

    num = 100
    dx = (x1 - x0) / num
    dy = (y1 - y0) / num
    lin_x = [x0 + dx * i for i in range(num)]
    lin_y = [y0 + dy * i for i in range(num)]
    return lin_x, lin_y

class Ui_newlin(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 700)
        MainWindow.setStyleSheet("background-color: rgb(170, 255, 127);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        #Таблица ввода левой нижней и правой верхней вершин прямоугольника
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 30, 256, 192))
        self.tableWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(2)

        self.tableWidget.setVerticalHeaderLabels(('x','y'))

        self.tableWidget.setHorizontalHeaderLabels(('Нижняя \n левая \n вершина','Верхняя \n правая \n вершина'))
        # заполняем Таблицу
        self.tableWidget.setItem(0, 0, QTableWidgetItem("1."))
        self.tableWidget.setItem(0, 1, QTableWidgetItem("2."))
        self.tableWidget.setItem(1, 0, QTableWidgetItem("1."))
        self.tableWidget.setItem(1, 1, QTableWidgetItem("2."))
        self.tableWidget.setToolTip('Координаты нижней левой и правой верхней вершин квадрата')
        # create label
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(320, 10, 651, 501))
        self.label.setMinimumSize(QtCore.QSize(400, 400))
        self.label.setMaximumSize(QtCore.QSize(800, 800))
        self.label.setObjectName("label")







        # Таблица ввода матрицы линейного преобразования
        self.tableWidget_2 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_2.setGeometry(QtCore.QRect(10, 240, 256, 192))
        self.tableWidget_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(2)
        self.tableWidget_2.setRowCount(2)
        self.tableWidget_2.setVerticalHeaderLabels(('0', '1'))
        self.tableWidget_2.setHorizontalHeaderLabels(('0', '1'))
        # заполняем Таблицу
        self.tableWidget_2.setItem(0, 0, QTableWidgetItem("-1."))
        self.tableWidget_2.setItem(0, 1, QTableWidgetItem("2."))
        self.tableWidget_2.setItem(1, 0, QTableWidgetItem("3."))
        self.tableWidget_2.setItem(1, 1, QTableWidgetItem("-4."))
        self.tableWidget_2.setToolTip('Матрица линейного преобразования')

        self.r_cond = QtWidgets.QLabel(self.centralwidget)
        self.r_cond.setGeometry(QtCore.QRect(400, 550, 500, 100))
        self.r_cond.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.r_cond.setObjectName("r_cond")
        self.r_cond.setToolTip('Здесь будут представлены условия расчета')

        # Кнопка запуска трансформиции
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 460, 93, 28))
        self.pushButton.setStyleSheet("background-color: rgb(0, 255, 0);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setToolTip('Старт расчета, подождите')

        # Кнопка остановки анимации
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(150, 460, 93, 28))
        self.pushButton_2.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setToolTip('Остановка расчета, можно менять параметры')

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)


        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.r_cond.setText(_translate("kkk", ""))
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Старт"))
        self.pushButton_2.setText(_translate("MainWindow", "Стоп"))
        self.set()






    def set(self):
        self.pushButton.clicked.connect(self.start)
        self.pushButton_2.clicked.connect(self.stop)

    def start(self):

        for i in range(2):
            for j in range(2):
                item = self.tableWidget.item(i, j).text()  # +++
                item = item if item else '0'  # +++
                H[i][j] = float(item)

        for i in range(2):
            for j in range(2):
                item = self.tableWidget_2.item(i, j).text()  # +++
                item = item if item else '0'  # +++
                a[i][j] = float(item)

        # making movie
        x_1 = [H[0][0], H[1][0]]
        x_3 = [H[0][1], H[1][1]]
        x_2 = [x_1[0], x_3[1]]
        x_4 = [x_3[0], x_1[1]]

        x_val = [x_1[0], x_2[0], x_3[0], x_4[0], x_1[0]]
        y_val = [x_1[1], x_2[1], x_3[1], x_4[1], x_1[1]]

        # вычисление значений вершин после линейного преобразования
        x_11 = np.dot(x_1, a)
        x_12 = np.dot(x_2, a)
        x_13 = np.dot(x_3, a)
        x_14 = np.dot(x_4, a)

        x_val1 = [x_11[0], x_12[0], x_13[0], x_14[0], x_11[0]]
        y_val1 = [x_11[1], x_12[1], x_13[1], x_14[1], x_11[1]]

        s_r = 'Трансформация \n квадрат  \n  в четырехугольник :'
        self.r_cond.setText(f'Трансформация \n квадрат с вершинами в точках\n A ={x_1[0]}, {x_1[1]}  в A1= {x_11[0]},{x_11[1]}\n B = {x_2[0]},{x_2[1]}  в B1 = {x_12[0]},{x_12[1]}\n C = {x_3[0]},{x_3[1]}  в C1 = {x_13[0]},{x_13[1]}\n D = {x_4[0]},{x_4[1]}  в D1 = {x_14[0]},{x_14[1]}')

        l_x1, l_y1 = lin(x_1[0], x_1[1], x_11[0], x_11[1])
        l_x2, l_y2 = lin(x_2[0], x_2[1], x_12[0], x_12[1])
        l_x3, l_y3 = lin(x_3[0], x_3[1], x_13[0], x_13[1])
        l_x4, l_y4 = lin(x_4[0], x_4[1], x_14[0], x_14[1])

        fig, ax = plt.subplots()
        fig.setsize = (6, 6)
        x_min = min(x_1[0], x_2[0], x_3[0], x_4[0], x_11[0], x_12[0], x_13[0], x_14[0])
        x_max = max(x_1[0], x_2[0], x_3[0], x_4[0], x_11[0], x_12[0], x_13[0], x_14[0])

        if x_min < 0:
            x_min = -int(abs(x_min) + 1)
        else:
            x_min = int(x_min) - 1
        if x_max < 0:
            x_max = -int(abs(x_max) + 1)
        else:
            x_max = int(x_max) + 1



        y_min = min(x_1[1], x_2[1], x_3[1], x_4[1], x_11[1], x_12[1], x_13[1], x_14[1])
        y_max = max(x_1[1], x_2[1], x_3[1], x_4[1], x_11[1], x_12[1], x_13[1], x_14[1])
        if y_min < 0:
            y_min = -int(abs(y_min) + 1)
        else:
            y_min = int(y_min) - 1
        if y_max < 0:
            y_max = -int(abs(y_max) + 1)
        else:
            y_max = int(y_max) + 1
        ax.set_xlim([x_min, x_max])
        ax.set_ylim([y_min, y_max])
        #  Устанавливаем интервал основных делений:
        ax.xaxis.set_major_locator(ticker.MultipleLocator(2))
        #  Устанавливаем интервал вспомогательных делений:
        ax.xaxis.set_minor_locator(ticker.MultipleLocator(1))
        ax.yaxis.set_major_locator(ticker.MultipleLocator(2))
        ax.yaxis.set_minor_locator(ticker.MultipleLocator(1))

        filenames = []
        for i in range(100):
            fig, ax = plt.subplots()
            fig.setsize = (3, 3)
            ax.set_xlim([x_min, x_max])
            ax.set_ylim([y_min, y_max])
            gr = ax.grid()
            #    ax.axis('equal')
            ax.set_aspect('equal', 'box')

            x_i = [l_x1[i], l_x2[i], l_x3[i], l_x4[i], l_x1[i]]
            y_i = [l_y1[i], l_y2[i], l_y3[i], l_y4[i], l_y1[i]]

            line, = ax.plot([x_i[0], x_i[1]], [y_i[0], y_i[1]], 'k')
            line1, = ax.plot([x_i[1], x_i[2]], [y_i[1], y_i[2]], 'r')
            line2, = ax.plot([x_i[2], x_i[3]], [y_i[2], y_i[3]], 'b')
            line3, = ax.plot([x_i[3], x_i[0]], [y_i[3], y_i[0]], 'g')
            title = ax.text(0.5, 1.05, "Ползу, шаг № {}".format(i),
                            size=plt.rcParams["axes.titlesize"],
                            ha="center", transform=ax.transAxes, )
            #    container.append([line, line1, line2, line3, title])
            # create file name and append it to a list
            filename = f'{i}.png'
            filenames.append(filename)
            # save frame
            plt.savefig(filename)
            plt.close()
        # build gif
        with imageio.get_writer('mygif.gif', mode='I') as writer:
            for filename in filenames:
                image = imageio.imread(filename)
                writer.append_data(image)

        # Remove files
        for filename in set(filenames):
            os.remove(filename)
        # Описание трансформации

        # set qmovie as label
        self.movie = QMovie("mygif.gif")
        self.label.setMovie(self.movie)
        self.movie.start()




    def stop(self):
        print('остановка')
        self.movie.stop()




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    newlin = QtWidgets.QMainWindow()
    ui = Ui_newlin()
    ui.setupUi(newlin)
    newlin.show()
    sys.exit(app.exec_())